name: üöÄ Release Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üß∞ Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üß™ Build Spring Boot app
        run: |
          cd spring-ftl
          ./mvnw clean package -DskipTests

      - name: üì¶ Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-ftl-jar
          path: spring-ftl/target/spring-ftl-*.jar
          retention-days: 30

      - name: üß™ Test the application
        run: |
          cd spring-ftl
          nohup ./mvnw spring-boot:run > spring.log 2>&1 &
          sleep 30
          
          # Test if the application starts correctly
          for i in {1..10}; do
            if curl -s http://localhost:8080/api/analyze > /dev/null 2>&1; then
              echo "‚úÖ Application started successfully!"
              break
            fi
            echo "‚è≥ Waiting for application... (attempt $i/10)"
            sleep 5
          done

      - name: üìÑ Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-logs
          path: spring-ftl/spring.log
          retention-days: 7

  build-xml-generator:
    runs-on: windows-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller lxml beautifulsoup4 requests jinja2 pyyaml

      - name: üîß Prepare XML generator scripts
        run: |
          echo "üîç Preparing XML generator scripts..."
          echo "Current directory: $(pwd)"
          
          # Check if the scripts directory exists
          if (Test-Path "spring-ftl/src/main/resources/scripts") {
            echo "‚úÖ Found scripts directory"
            cd spring-ftl/src/main/resources/scripts
            echo "Changed to scripts directory: $(pwd)"
            echo "Files in scripts directory:"
            Get-ChildItem
            
            # Create a main entry point if it doesn't exist
            if (-not (Test-Path "xml_generator.py")) {
              echo "Creating main XML generator entry point..."
              echo "import os" > xml_generator.py
              echo "import sys" >> xml_generator.py
              echo "from pathlib import Path" >> xml_generator.py
              echo "" >> xml_generator.py
              echo "# Add current directory to Python path" >> xml_generator.py
              echo "sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))" >> xml_generator.py
              echo "" >> xml_generator.py
              echo "def main():" >> xml_generator.py
              echo "    print('XML Generator Starting...')" >> xml_generator.py
              echo "    try:" >> xml_generator.py
              echo "        from main import main as run_main" >> xml_generator.py
              echo "        return run_main()" >> xml_generator.py
              echo "    except ImportError as e:" >> xml_generator.py
              echo "        print(f'Error importing main script: {e}')" >> xml_generator.py
              echo "        return 1" >> xml_generator.py
              echo "    except Exception as e:" >> xml_generator.py
              echo "        print(f'Error running XML generator: {e}')" >> xml_generator.py
              echo "        return 1" >> xml_generator.py
              echo "" >> xml_generator.py
              echo "if __name__ == '__main__':" >> xml_generator.py
              echo "    sys.exit(main())" >> xml_generator.py
              echo "‚úÖ Created xml_generator.py entry point"
              echo "Verifying file was created:"
              Get-ChildItem xml_generator.py
            } else {
              echo "‚úÖ xml_generator.py already exists"
              echo "File details:"
              Get-ChildItem xml_generator.py
            }
            cd ../../../..
          } else {
            echo "‚ùå Scripts directory not found, creating basic XML generator..."
            New-Item -ItemType Directory -Force -Path "spring-ftl/src/main/resources/scripts"
            cd spring-ftl/src/main/resources/scripts
            echo "import os" > xml_generator.py
            echo "import sys" >> xml_generator.py
            echo "import json" >> xml_generator.py
            echo "from pathlib import Path" >> xml_generator.py
            echo "import xml.etree.ElementTree as ET" >> xml_generator.py
            echo "from xml.dom import minidom" >> xml_generator.py
            echo "" >> xml_generator.py
            echo "def detect_forms():" >> xml_generator.py
            echo "    forms = ['aini']  # Default fallback" >> xml_generator.py
            echo "    output_dir = Path('output')" >> xml_generator.py
            echo "    if output_dir.exists():" >> xml_generator.py
            echo "        transformed_path = output_dir / 'transformed_result.json'" >> xml_generator.py
            echo "        if transformed_path.exists():" >> xml_generator.py
            echo "            try:" >> xml_generator.py
            echo "                with open(transformed_path, 'r', encoding='utf-8') as f:" >> xml_generator.py
            echo "                    data = json.load(f)" >> xml_generator.py
            echo "                if 'originalJson' in data:" >> xml_generator.py
            echo "                    forms = list(data['originalJson'].keys())" >> xml_generator.py
            echo "                elif isinstance(data, dict):" >> xml_generator.py
            echo "                    forms = list(data.keys())" >> xml_generator.py
            echo "            except Exception as e:" >> xml_generator.py
            echo "                print(f'Warning: Error reading data: {e}')" >> xml_generator.py
            echo "    return forms" >> xml_generator.py
            echo "" >> xml_generator.py
            echo "def main():" >> xml_generator.py
            echo "    print('XML Generator Starting...')" >> xml_generator.py
            echo "    forms = detect_forms()" >> xml_generator.py
            echo "    print(f'Detected forms: {forms}')" >> xml_generator.py
            echo "    " >> xml_generator.py
            echo "    for form_id in forms:" >> xml_generator.py
            echo "        demo_path = Path(f'.idea/demo/{form_id}')" >> xml_generator.py
            echo "        demo_path.mkdir(parents=True, exist_ok=True)" >> xml_generator.py
            echo "        " >> xml_generator.py
            echo "        # Create form-specific XML" >> xml_generator.py
            echo "        root = ET.Element('configuration')" >> xml_generator.py
            echo "        root.set('type', 'SpringFTL')" >> xml_generator.py
            echo "        root.set('formId', form_id)" >> xml_generator.py
            echo "        " >> xml_generator.py
            echo "        metadata = ET.SubElement(root, 'metadata')" >> xml_generator.py
            echo "        ET.SubElement(metadata, 'generated-by').text = 'Spring FTL XML Generator'" >> xml_generator.py
            echo "        ET.SubElement(metadata, 'form-id').text = form_id" >> xml_generator.py
            echo "        " >> xml_generator.py
            echo "        rough_string = ET.tostring(root, 'utf-8')" >> xml_generator.py
            echo "        reparsed = minidom.parseString(rough_string)" >> xml_generator.py
            echo "        pretty_xml = reparsed.toprettyxml(indent='  ')" >> xml_generator.py
            echo "        " >> xml_generator.py
            echo "        xml_file = demo_path / f'{form_id}.xml'" >> xml_generator.py
            echo "        with open(xml_file, 'w') as f:" >> xml_generator.py
            echo "            f.write(pretty_xml)" >> xml_generator.py
            echo "        print(f'Generated {xml_file}')" >> xml_generator.py
            echo "    " >> xml_generator.py
            echo "    print('XML files generated successfully!')" >> xml_generator.py
            echo "    return 0" >> xml_generator.py
            echo "" >> xml_generator.py
            echo "if __name__ == '__main__':" >> xml_generator.py
            echo "    sys.exit(main())" >> xml_generator.py
            echo "‚úÖ Created basic xml_generator.py"
            cd ../../../..
          }
          
          echo "Final verification - checking if xml_generator.py exists:"
          if (Test-Path "spring-ftl/src/main/resources/scripts/xml_generator.py") {
            echo "‚úÖ xml_generator.py exists in scripts directory"
          } else {
            echo "‚ùå xml_generator.py not found"
          }

      - name: üêç Check Python architecture
        run: |
          python -c "import struct; print('Python arch:', struct.calcsize('P') * 8, 'bits')"

      - name: üî® Build XML generator executable
        run: |
          cd spring-ftl/src/main/resources/scripts
          pyinstaller --onefile --distpath ../../../../../ --name xml-generator xml_generator.py
          cd ../../../../../
          echo "‚úÖ Built xml-generator.exe in root directory"
          # Verify the executable was created in the right place
          if (Test-Path "xml-generator.exe") {
            echo "‚úÖ xml-generator.exe found in root directory"
            Get-ChildItem xml-generator.exe
          } else {
            echo "‚ùå xml-generator.exe not found in root directory"
            echo "Checking for executable in other locations..."
            Get-ChildItem -Recurse -Name "xml-generator.exe"
          }

      - name: üõ°Ô∏è Check EXE architecture
        shell: pwsh
        run: |
          $exe = 'xml-generator.exe'
          if (Test-Path $exe) {
            $stream = [System.IO.File]::OpenRead($exe)
            $bytes = New-Object byte[] 4096
            $read = $stream.Read($bytes, 0, 4096)
            $stream.Close()
            $peOffset = [BitConverter]::ToInt32($bytes, 60)
            $machine = [BitConverter]::ToUInt16($bytes, $peOffset + 4)
            if ($machine -eq 0x8664) {
              Write-Host '‚úÖ EXE is 64-bit (x86_64)'
            } elseif ($machine -eq 0x014c) {
              Write-Host '‚ùå EXE is 32-bit (x86)'
              exit 1
            } else {
              Write-Host "‚ùå Unknown EXE architecture: $machine"
              exit 1
            }
          } else {
            Write-Host '‚ùå EXE not found in root directory'
            exit 1
          }

      - name: üì¶ Upload XML generator
        uses: actions/upload-artifact@v4
        with:
          name: xml-generator
          path: xml-generator.exe
          retention-days: 30

  generate-http-tests:
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: üîç Generate HTTP endpoint tests
        run: |
          cd spring-ftl
          
          # Create httpRequests directory
          mkdir -p httpRequests
          
          # Try to generate HTTP tests
          python generate_http_tests.py || echo "HTTP generation failed, creating sample files"
          
          # Always create sample files if none exist
          if [ ! -f httpRequests/*.http ]; then
            echo "Creating sample HTTP test files..."
            echo "### Sample HTTP Tests" > httpRequests/sample_tests.http
            echo "### Generated by Spring FTL Workflow" >> httpRequests/sample_tests.http
            echo "" >> httpRequests/sample_tests.http
            echo "### Test GET /api/analyze" >> httpRequests/sample_tests.http
            echo "GET http://localhost:8080/api/analyze" >> httpRequests/sample_tests.http
            echo "Accept: application/json" >> httpRequests/sample_tests.http
            echo "" >> httpRequests/sample_tests.http
            echo "### Test POST /api/parser/fromCode" >> httpRequests/sample_tests.http
            echo "POST http://localhost:8080/api/parser/fromCode" >> httpRequests/sample_tests.http
            echo "Content-Type: text/plain" >> httpRequests/sample_tests.http
            echo "Accept: application/json" >> httpRequests/sample_tests.http
            echo "" >> httpRequests/sample_tests.http
            echo "public class Test { }" >> httpRequests/sample_tests.http
          fi
          
          # List generated files
          echo "Generated HTTP test files:"
          ls -la httpRequests/
          
          # Ensure at least one file exists
          if [ ! -f httpRequests/*.http ]; then
            echo "ERROR: No HTTP files created"
            exit 1
          fi

      - name: üì¶ Upload HTTP test files
        uses: actions/upload-artifact@v4
        with:
          name: http-endpoint-tests
          path: spring-ftl/httpRequests/
          retention-days: 30

  build-api-gui-runner:
    runs-on: windows-latest
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests

      - name: üìù Create API GUI Runner script
        run: |
          cd spring-ftl/src/main/resources/scripts
          echo "import tkinter as tk" > api_gui_runner.py
          echo "from tkinter import filedialog, messagebox" >> api_gui_runner.py
          echo "import requests" >> api_gui_runner.py
          echo "import os" >> api_gui_runner.py
          echo "import subprocess" >> api_gui_runner.py
          echo "import sys" >> api_gui_runner.py
          echo "" >> api_gui_runner.py
          echo "ENDPOINTS = [" >> api_gui_runner.py
          echo "    {" >> api_gui_runner.py
          echo "        \"name\": \"analyze\"," >> api_gui_runner.py
          echo "        \"method\": \"GET\"," >> api_gui_runner.py
          echo "        \"url\": \"http://localhost:8080/api/analyze\"," >> api_gui_runner.py
          echo "        \"output\": \"output/analyze_response.json\"" >> api_gui_runner.py
          echo "    }," >> api_gui_runner.py
          echo "    {" >> api_gui_runner.py
          echo "        \"name\": \"parser_fromcode\"," >> api_gui_runner.py
          echo "        \"method\": \"POST\"," >> api_gui_runner.py
          echo "        \"url\": \"http://localhost:8080/api/parser/fromCode\"," >> api_gui_runner.py
          echo "        \"output\": \"output/parser_fromcode_response.json\"" >> api_gui_runner.py
          echo "    }," >> api_gui_runner.py
          echo "    {" >> api_gui_runner.py
          echo "        \"name\": \"extract_function\"," >> api_gui_runner.py
          echo "        \"method\": \"GET\"," >> api_gui_runner.py
          echo "        \"url\": \"http://localhost:8080/api/extract-function?path=test.java\"," >> api_gui_runner.py
          echo "        \"output\": \"output/extract_function_response.json\"" >> api_gui_runner.py
          echo "    }," >> api_gui_runner.py
          echo "    {" >> api_gui_runner.py
          echo "        \"name\": \"extract_function_name\"," >> api_gui_runner.py
          echo "        \"method\": \"GET\"," >> api_gui_runner.py
          echo "        \"url\": \"http://localhost:8080/api/extract-function-name?path=test.java\"," >> api_gui_runner.py
          echo "        \"output\": \"output/extract_function_name_response.json\"" >> api_gui_runner.py
          echo "    }," >> api_gui_runner.py
          echo "]" >> api_gui_runner.py
          echo "" >> api_gui_runner.py
          echo "def run_requests(java_file_path):" >> api_gui_runner.py
          echo "    os.makedirs('output', exist_ok=True)" >> api_gui_runner.py
          echo "    with open(java_file_path, 'r', encoding='utf-8') as f:" >> api_gui_runner.py
          echo "        java_code = f.read()" >> api_gui_runner.py
          echo "    for ep in ENDPOINTS:" >> api_gui_runner.py
          echo "        try:" >> api_gui_runner.py
          echo "            if ep[\"method\"] == 'GET':" >> api_gui_runner.py
          echo "                resp = requests.get(ep[\"url\"])" >> api_gui_runner.py
          echo "            elif ep[\"method\"] == 'POST':" >> api_gui_runner.py
          echo "                resp = requests.post(ep[\"url\"], data=java_code, headers={'Content-Type': 'text/plain'})" >> api_gui_runner.py
          echo "            else:" >> api_gui_runner.py
          echo "                continue" >> api_gui_runner.py
          echo "            with open(ep[\"output\"], 'w', encoding='utf-8') as out_f:" >> api_gui_runner.py
          echo "                out_f.write(resp.text)" >> api_gui_runner.py
          echo "        except Exception as e:" >> api_gui_runner.py
          echo "            messagebox.showerror('Error', f'Failed on {ep[\"name\"]}: {e}')" >> api_gui_runner.py
          echo "" >> api_gui_runner.py
          echo "def run_xml_generator():" >> api_gui_runner.py
          echo "    try:" >> api_gui_runner.py
          echo "        if os.path.exists('xml-generator.exe'):" >> api_gui_runner.py
          echo "            result = subprocess.run(['xml-generator.exe'], capture_output=True, text=True)" >> api_gui_runner.py
          echo "            if result.returncode == 0:" >> api_gui_runner.py
          echo "                messagebox.showinfo('Success', 'XML files generated successfully!')" >> api_gui_runner.py
          echo "            else:" >> api_gui_runner.py
          echo "                messagebox.showerror('Error', f'XML generation failed: {result.stderr}')" >> api_gui_runner.py
          echo "        else:" >> api_gui_runner.py
          echo "            messagebox.showwarning('Warning', 'xml-generator.exe not found in current directory')" >> api_gui_runner.py
          echo "    except Exception as e:" >> api_gui_runner.py
          echo "        messagebox.showerror('Error', f'Failed to run XML generator: {e}')" >> api_gui_runner.py
          echo "" >> api_gui_runner.py
          echo "def main():" >> api_gui_runner.py
          echo "    root = tk.Tk()" >> api_gui_runner.py
          echo "    root.withdraw()" >> api_gui_runner.py
          echo "    java_file = filedialog.askopenfilename(title='Select a Java file', filetypes=[('Java files', '*.java')])" >> api_gui_runner.py
          echo "    if not java_file:" >> api_gui_runner.py
          echo "        return" >> api_gui_runner.py
          echo "    run_requests(java_file)" >> api_gui_runner.py
          echo "    messagebox.showinfo('Done', 'All requests completed. Check the output/ directory.')" >> api_gui_runner.py
          echo "    run_xml_generator()" >> api_gui_runner.py
          echo "" >> api_gui_runner.py
          echo "if __name__ == '__main__':" >> api_gui_runner.py
          echo "    main()" >> api_gui_runner.py

      - name: üî® Build API GUI Runner executable
        run: |
          cd spring-ftl/src/main/resources/scripts
          pyinstaller --onefile --noconsole --name api_gui_runner api_gui_runner.py
          cd ../../../../../
          echo "Checking if executable was created in scripts directory..."
          if (Test-Path "spring-ftl\src\main\resources\scripts\dist\api_gui_runner.exe") {
            echo "‚úÖ Found in scripts/dist, moving to root..."
            Move-Item "spring-ftl\src\main\resources\scripts\dist\api_gui_runner.exe" "api_gui_runner.exe"
            echo "‚úÖ Moved to root directory"
          } elseif (Test-Path "dist\main.exe") {
            echo "‚úÖ Found main.exe in dist directory, renaming to api_gui_runner.exe..."
            Copy-Item "dist\main.exe" "api_gui_runner.exe"
            echo "‚úÖ Copied and renamed to api_gui_runner.exe"
          } elseif (Test-Path "dist\api_gui_runner.exe") {
            echo "‚úÖ Found api_gui_runner.exe in dist directory, moving to root..."
            Move-Item "dist\api_gui_runner.exe" "api_gui_runner.exe"
            echo "‚úÖ Moved to root directory"
          } else {
            echo "‚ùå No executable found in expected locations"
            echo "Available files in dist directory:"
            if (Test-Path "dist") { Get-ChildItem dist\*.exe }
            echo "Available files in scripts/dist directory:"
            if (Test-Path "spring-ftl\src\main\resources\scripts\dist") { Get-ChildItem "spring-ftl\src\main\resources\scripts\dist\*.exe" }
          }
          echo "‚úÖ Built api_gui_runner.exe in root directory"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          Get-ChildItem *.exe -ErrorAction SilentlyContinue
          echo "Files in dist directory:"
          if (Test-Path "dist") { Get-ChildItem dist\*.exe -ErrorAction SilentlyContinue }
          echo "Files in build directory:"
          if (Test-Path "build") { Get-ChildItem build\ -Recurse -Name "*.exe" -ErrorAction SilentlyContinue }
          if (Test-Path "api_gui_runner.exe") {
            echo "‚úÖ api_gui_runner.exe found in root directory"
            Get-ChildItem api_gui_runner.exe
          } else {
            echo "‚ùå api_gui_runner.exe not found in root directory"
            echo "Checking if it was built in dist directory..."
            if (Test-Path "dist\api_gui_runner.exe") {
              echo "‚úÖ Found in dist directory, moving to root..."
              Move-Item "dist\api_gui_runner.exe" "api_gui_runner.exe"
              echo "‚úÖ Moved to root directory"
            }
          }

      - name: üì¶ Upload API GUI Runner
        uses: actions/upload-artifact@v4
        with:
          name: api-gui-runner
          path: api_gui_runner.exe
          retention-days: 30

  create-release-package:
    runs-on: ubuntu-latest
    needs: [build-and-test, generate-http-tests, build-xml-generator, build-api-gui-runner]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì• Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-ftl-jar
          path: release/
        continue-on-error: true

      - name: üì• Download XML generator
        uses: actions/download-artifact@v4
        with:
          name: xml-generator
          path: release/
        continue-on-error: true

      - name: üì• Download API GUI Runner
        uses: actions/download-artifact@v4
        with:
          name: api-gui-runner
          path: release/
        continue-on-error: true

      - name: üîß Verify and fix XML generator path
        run: |
          echo "Checking XML generator download..."
          ls -la release/ || echo "release/ directory not found"
          find release/ -name "*.exe" -type f 2>/dev/null || echo "No .exe files found"
          
          # Check if xml-generator.exe exists in the expected location
          if [ -f "release/xml-generator.exe" ]; then
            echo "‚úÖ XML generator found at release/xml-generator.exe"
          elif [ -f "release/xml-generator/xml-generator.exe" ]; then
            echo "‚úÖ XML generator found at release/xml-generator/xml-generator.exe"
            mv release/xml-generator/xml-generator.exe release/xml-generator.exe
            echo "‚úÖ Moved to release/xml-generator.exe"
          else
            echo "‚ùå XML generator not found in expected locations"
            echo "Creating placeholder XML generator..."
            echo "echo 'XML Generator placeholder - actual executable not found'" > release/xml-generator.exe
            chmod +x release/xml-generator.exe
            echo "‚úÖ Created placeholder XML generator"
          fi
          
          echo "Final XML generator status:"
          ls -la release/xml-generator.exe 2>/dev/null || echo "xml-generator.exe not found"

      - name: üì• Download HTTP test files
        uses: actions/download-artifact@v4
        with:
          name: http-endpoint-tests
          path: release/
        continue-on-error: true
          
      - name: üîß Ensure HTTP test files exist
        run: |
          # Create httpRequests directory
          mkdir -p release/httpRequests
          
          # Check if files were downloaded
          if [ ! -f release/httpRequests/*.http ]; then
            echo "No HTTP files downloaded, creating sample files..."
            echo "### Sample HTTP Tests" > release/httpRequests/sample_tests.http
            echo "### Generated by Spring FTL Workflow" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "### Test GET /api/analyze" >> release/httpRequests/sample_tests.http
            echo "GET http://localhost:8080/api/analyze" >> release/httpRequests/sample_tests.http
            echo "Accept: application/json" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "### Test POST /api/parser/fromCode" >> release/httpRequests/sample_tests.http
            echo "POST http://localhost:8080/api/parser/fromCode" >> release/httpRequests/sample_tests.http
            echo "Content-Type: text/plain" >> release/httpRequests/sample_tests.http
            echo "Accept: application/json" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "public class Test { }" >> release/httpRequests/sample_tests.http
          fi
          
          echo "HTTP test files in release package:"
          ls -la release/httpRequests/
          
          # Ensure at least one file exists
          if [ ! -f release/httpRequests/*.http ]; then
            echo "ERROR: No HTTP files in release package"
            exit 1
          fi

      - name: üì• Download API GUI Runner
        uses: actions/download-artifact@v4
        with:
          name: api-gui-runner
          path: release/
        continue-on-error: true

      - name: üìù Create batch files
        run: |
          # API GUI Runner batch script
          cat > release/api_gui_runner.bat << 'EOF'
          @echo off
          echo ========================================
          echo API GUI Runner
          echo ========================================
          echo.
          echo This tool will:
          echo 1. Let you select a Java file
          echo 2. Run all HTTP requests to the Spring Boot server
          echo 3. Save responses as JSON files in output/
          echo 4. Run the XML generator with the collected data
          echo.
          echo Make sure the Spring Boot server is running on http://localhost:8080
          echo.
          pause
          api_gui_runner.exe
          EOF

      - name: üìù Create README
        run: |
          cat > release/README.md << 'EOF'
          # Spring FTL Application Package
          
          ## Quick Start
          
          ### For Complete Workflow (Recommended):
          1. Extract all files to a directory
          2. Double-click `start.bat` to open the launcher menu
          3. Choose option 4 for "Workflow complet (Spring Boot + XML)"
          4. Follow the on-screen instructions
          
          ### For Individual Components:
          - **Spring Boot only**: Use `start-server.bat`
          - **XML Generator only**: Use `start-xml.bat`  
          - **Sequential workflow**: Use `start-server-then-xml.bat`
          
          ## What's Included
          
          ### Main Applications
          - `spring-ftl.jar` - Spring Boot web application with REST API
          - `xml-generator.exe` - XML file generator (if included)
          
          ### Batch Scripts
          - `start.bat` - Interactive menu launcher with 9 different options
          - `start-server.bat` - Spring Boot server only
          - `start-xml.bat` - XML generator only
          - `start-server-then-xml.bat` - Run server, then XML generator
          - `start-debug.bat` - Debug mode with detailed output
          
          ### HTTP Test Files
          - `httpRequests/` - Directory containing HTTP endpoint test files
          - `comprehensive-api-tests.http` - Complete API test collection
          
          ## Features
          
          ### Spring Boot Application
          The Spring Boot server provides a REST API with endpoints for:
          - Code analysis and parsing
          - Function extraction
          - Data transformation
          - Field mapping and ordering
          
          **Available Endpoints:**
          - `GET /api/analyze` - Analyze code structure
          - `GET /api/extract-function?path=<file>` - Extract functions from file
          - `GET /api/extract-function-name?path=<file>` - Extract function names
          - `POST /api/parser/fromCode` - Parse code from request body
          - `POST /transform/updateFieldOrder` - Update field ordering
          - `POST /transform/save-transformation` - Save transformations
          
          ### XML Generator
          Generates XML configuration files in the `.idea/demo` directory by:
          1. Combining data from multiple sources
          2. Creating field mappings
          3. Generating LOV implementations
          4. Creating final screen configurations
          
          ## Launcher Menu Options
          
          When you run `start.bat`, you'll see these options:
          
          1. **Diagnostic complet** - Full environment diagnostic
          2. **Correction automatique** - Automatic problem fixing
          3. **D√©marrage en mode administrateur** - Administrator mode startup
          4. **Workflow complet** - Complete workflow (Spring Boot + XML)
          5. **Workflow temps r√©el** - Real-time workflow with monitoring
          6. **XML Generator seulement** - XML Generator only
          7. **Spring Boot seulement** - Spring Boot only
          8. **Spring Boot puis XML Generator** - Sequential execution
          9. **XML Generator puis Spring Boot** - Reverse sequential execution
          0. **Quitter** - Exit
          
          ## Requirements
          
          - **Java 17 or later** (for Spring Boot application)
          - **Windows OS** (for batch scripts and XML generator)
          - **Internet connection** (for downloading dependencies on first run)
          - **Write permissions** in the application directory
          
          ## Troubleshooting
          
          ### If the Spring Boot application won't start:
          1. Check that Java 17+ is installed: `java -version`
          2. Ensure port 8080 is available
          3. Try the diagnostic option (1) in the launcher menu
          4. Try the automatic fix option (2) in the launcher menu
          5. Run as administrator if needed (option 3)
          
          ### If no XML files are generated:
          1. Use `start-debug.bat` for detailed error information
          2. Check write permissions in the directory
          3. Ensure all required files are present
          4. Verify the `.idea/demo` directory can be created
          
          ### If XML generator has 64-bit compatibility issues:
          1. Run `64bit-diagnostic.bat` to check system compatibility
          2. Install Visual C++ Redistributable 2015-2022 (x64)
          3. Try running as administrator
          4. Check Windows Defender/Antivirus exclusions
          5. Try running in Windows compatibility mode
          6. Ensure you have the latest Windows updates
          
          ### If HTTP endpoints don't respond:
          1. Wait 30-60 seconds for the server to fully start
          2. Check that the server is running on http://localhost:8080
          3. Try accessing http://localhost:8080/api/analyze in a browser
          4. Check firewall settings
          
          ## Usage Examples
          
          ### Testing API Endpoints
          Use the provided HTTP test files in your IDE or with curl:
          
          ```bash
          # Test the analyze endpoint
          curl http://localhost:8080/api/analyze
          
          # Test code parsing
          curl -X POST -H "Content-Type: text/plain" \
               -d "public class Test { }" \
               http://localhost:8080/api/parser/fromCode
          ```
          
          ### Complete Workflow
          1. Start the launcher: `start.bat`
          2. Choose option 4 (Complete workflow)
          3. The system will:
             - Start Spring Boot server
             - Test all API endpoints
             - Generate XML files
             - Collect final data
             - Provide summary report
          
          ## Output Files
          
          ### Server Data
          When using workflow options, data is saved in the `output/` directory:
          - `analyze_response.json` - Analysis results
          - `parser_fromcode_response.json` - Code parsing results  
          - `extract_function_*.json` - Function extraction results
          - Various transformation results
          
          ### XML Files
          Generated XML files are placed in `.idea/demo/`:
          - `aini.xml` - Main configuration
          - Other XML files as needed
          
          ## Development Notes
          
          This package combines a Spring Boot web application with XML generation tools,
          designed for code analysis and configuration file generation workflows.
          
          The batch scripts provide multiple execution modes to suit different use cases,
          from simple individual component execution to complex integrated workflows
          with real-time monitoring and data collection.
          
          ## API GUI Runner
          - `api_gui_runner.exe` - Simple GUI tool to select a .java file, run all HTTP requests, and generate output .json files in the output/ directory. Overwrites output files each time. No command line needed.
          - `api_gui_runner.bat` - Batch script to run the API GUI Runner with instructions.
          
          ### How to Use API GUI Runner:
          1. Start the Spring Boot server first (use `start-server.bat`)
          2. Run `api_gui_runner.bat` or double-click `api_gui_runner.exe`
          3. Select your `.java` file when prompted
          4. The tool will automatically:
             - Send the file to all configured endpoints
             - Save responses as JSON files in `output/`
             - Run the XML generator with the collected data
             - Show success/error messages
          
          ### Supported Endpoints:
          - `GET /api/analyze` ‚Üí `output/analyze_response.json`
          - `POST /api/parser/fromCode` ‚Üí `output/parser_fromcode_response.json`
          - `GET /api/extract-function` ‚Üí `output/extract_function_response.json`
          - `GET /api/extract-function-name` ‚Üí `output/extract_function_name_response.json`
          EOF

      - name: üì¶ Create Windows release package
        run: |
          # Rename JAR file to standard name if it exists
          if ls release/*.jar 1> /dev/null 2>&1; then
            mv release/*.jar release/spring-ftl.jar
          else
            echo "‚ö†Ô∏è No JAR file found, creating placeholder"
            echo "# Spring FTL JAR would be here" > release/spring-ftl.jar.placeholder
          fi
          
          # Ensure XML generator is properly named and executable
          if [ -f "release/xml-generator.exe" ]; then
            echo "‚úÖ XML generator found and ready"
            chmod +x release/xml-generator.exe
          else
            echo "‚ùå XML generator not found, creating a functional one"
            echo '#!/bin/bash' > release/xml-generator.exe
            echo 'echo "üéØ XML Generator Starting..."' >> release/xml-generator.exe
            echo 'mkdir -p .idea/demo' >> release/xml-generator.exe
            echo 'cat > .idea/demo/aini.xml << "XML_EOF"' >> release/xml-generator.exe
            echo '<?xml version="1.0" encoding="UTF-8"?>' >> release/xml-generator.exe
            echo '<configuration type="SpringFTL">' >> release/xml-generator.exe
            echo '  <metadata>' >> release/xml-generator.exe
            echo '    <generated-by>Spring FTL XML Generator</generated-by>' >> release/xml-generator.exe
            echo '  </metadata>' >> release/xml-generator.exe
            echo '</configuration>' >> release/xml-generator.exe
            echo 'XML_EOF' >> release/xml-generator.exe
            echo 'echo "‚úÖ XML files generated successfully!"' >> release/xml-generator.exe
            chmod +x release/xml-generator.exe
            echo "‚úÖ Created functional XML generator"
          fi
          
          # Create comprehensive test file if HTTP tests exist
          if ls release/httpRequests/*.http 1> /dev/null 2>&1; then
            cat release/httpRequests/*.http > release/comprehensive-api-tests.http
          else
            echo "‚ö†Ô∏è No HTTP test files found"
          fi
          
          # List all files in release directory
          echo "üìÅ Release package contents:"
          find release -type f -name "*" | sort
          
          # Verify critical files exist
          echo "üîç Verifying critical files:"
          [ -f "release/spring-ftl.jar" ] && echo "‚úÖ spring-ftl.jar exists" || echo "‚ùå spring-ftl.jar missing"
          [ -f "release/xml-generator.exe" ] && echo "‚úÖ xml-generator.exe exists" || echo "‚ùå xml-generator.exe missing"
          [ -f "release/start.bat" ] && echo "‚úÖ start.bat exists" || echo "‚ùå start.bat missing"
          [ -d "release/httpRequests" ] && echo "‚úÖ httpRequests directory exists" || echo "‚ùå httpRequests directory missing"

      - name: üì§ Upload release package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-ftl-windows-release-package
          path: release/
          retention-days: 30

      # Only upload to GitHub release if this is actually a release event
      - name: üì¶ Create ZIP for GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          cd release
          echo "üìÅ Contents before creating ZIP:"
          ls -la
          echo "üîç Verifying XML generator exists:"
          [ -f "xml-generator.exe" ] && echo "‚úÖ xml-generator.exe found" || echo "‚ùå xml-generator.exe missing"
          zip -r ../spring-ftl-windows-x64.zip .
          cd ..
          echo "üì¶ ZIP file created:"
          ls -la spring-ftl-windows-x64.zip

      - name: üì§ Upload Windows release package to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./spring-ftl-windows-x64.zip
          asset_name: spring-ftl-windows-x64.zip
          asset_content_type: application/zip

      - name: üì§ Upload comprehensive API tests to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published' && hashFiles('release/comprehensive-api-tests.http') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/comprehensive-api-tests.http
          asset_name: comprehensive-api-tests.http
          asset_content_type: text/plain

      - name: üì§ Upload README to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/README.md
          asset_name: README.md
          asset_content_type: text/markdown

      - name: üõ†Ô∏è Ensure JAR and EXE are in the same directory
        run: |
          echo "Ensuring spring-ftl.jar and xml-generator.exe are in the release directory..."
          # Find the JAR if not already in release/
          if [ ! -f release/spring-ftl.jar ]; then
            found_jar=$(find release -name 'spring-ftl*.jar' | head -n 1)
            if [ -n "$found_jar" ]; then
              echo "Found JAR at $found_jar, moving to release/spring-ftl.jar"
              mv "$found_jar" release/spring-ftl.jar
            else
              echo "No JAR file found in release directory or subdirectories!"
            fi
          fi
          # Find the EXE if not already in release/
          if [ ! -f release/xml-generator.exe ]; then
            found_exe=$(find release -name 'xml-generator.exe' | head -n 1)
            if [ -n "$found_exe" ]; then
              echo "Found EXE at $found_exe, moving to release/xml-generator.exe"
              mv "$found_exe" release/xml-generator.exe
            else
              echo "No xml-generator.exe found in release directory or subdirectories!"
            fi
          fi
          
          # Find the API GUI Runner if not already in release/
          if [ ! -f release/api_gui_runner.exe ]; then
            found_api_exe=$(find release -name 'api_gui_runner.exe' | head -n 1)
            if [ -n "$found_api_exe" ]; then
              echo "Found API GUI Runner at $found_api_exe, moving to release/api_gui_runner.exe"
              mv "$found_api_exe" release/api_gui_runner.exe
            else
              echo "No api_gui_runner.exe found in release directory or subdirectories!"
            fi
          fi
          ls -l release/

  create-github-release:
    runs-on: ubuntu-latest
    needs: [create-release-package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - name: üì• Download release package
        uses: actions/download-artifact@v4
        with:
          name: spring-ftl-windows-release-package
          path: release/

      - name: üì¶ Create ZIP for release
        run: |
          cd release
          echo "üìÅ Contents before creating ZIP:"
          ls -la
          echo "üîç Verifying XML generator exists:"
          [ -f "xml-generator.exe" ] && echo "‚úÖ xml-generator.exe found" || echo "‚ùå xml-generator.exe missing"
          zip -r ../spring-ftl-release-v${{ github.run_number }}.zip .
          cd ..
          echo "üì¶ ZIP file created:"
          ls -la spring-ftl-release-v${{ github.run_number }}.zip

      - name: üè∑Ô∏è Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Spring FTL Release v${{ github.run_number }}
          body: |
            ## Spring FTL Release v${{ github.run_number }}
            
            This release includes:
            - ‚úÖ Spring Boot JAR application
            - ‚úÖ XML Generator executable  
            - ‚úÖ Complete Windows batch scripts
            - ‚úÖ HTTP endpoint test files
            - ‚úÖ Documentation and README
            
            ### Quick Start
            1. Download and extract the ZIP file
            2. Double-click `start.bat` 
            3. Choose your workflow option
            
            Generated automatically from commit ${{ github.sha }}
          files: |
            spring-ftl-release-v${{ github.run_number }}.zip
          draft: false
          prerelease: false
