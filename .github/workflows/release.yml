name: 🚀 Release Build (Fixed)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🧪 Build Spring Boot app
        run: |
          cd spring-ftl
          ./mvnw clean package -DskipTests

      - name: 📦 Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-ftl-jar
          path: spring-ftl/target/spring-ftl-*.jar
          retention-days: 30

      - name: 🧪 Test the application with proper endpoint discovery
        run: |
          cd spring-ftl
          
          # Create enhanced application.properties for testing
          cat >> src/main/resources/application.properties << 'EOF'
          
          # Enhanced logging for debugging
          logging.level.org.springframework.web=INFO
          logging.level.org.springframework.boot.web=INFO
          server.error.include-message=always
          server.error.include-binding-errors=always
          server.error.include-stacktrace=on_param
          
          # Actuator endpoints for health checking
          management.endpoints.web.exposure.include=health,info
          management.endpoint.health.show-details=always
          EOF
          
          # Start the application in background
          echo "🚀 Starting Spring Boot application..."
          nohup ./mvnw spring-boot:run > spring.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for startup with better health checking
          echo "⏳ Waiting for application startup..."
          sleep 45  # Give more time for startup
          
          # Check if process is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "❌ Server process died during startup!"
            echo "📋 Server logs:"
            cat spring.log
            exit 1
          fi
          
          # Test multiple endpoints with proper error handling
          echo "🔍 Testing application endpoints..."
          
          # Test 1: Root endpoint (should always exist)
          for i in {1..15}; do
            echo "🔄 Health check attempt $i/15..."
            
            # Try actuator health first
            if curl -s -f http://localhost:8080/actuator/health > health_response.json 2>/dev/null; then
              echo "✅ Actuator health endpoint working!"
              cat health_response.json
              break
            fi
            
            # Try root endpoint
            if curl -s -f http://localhost:8080/ > root_response.json 2>/dev/null; then
              echo "✅ Root endpoint accessible!"
              break
            fi
            
            # Try with error details
            if curl -s -w "HTTP Status: %{http_code}\n" http://localhost:8080/ > debug_response.json 2>&1; then
              echo "🔍 Got response (checking status):"
              cat debug_response.json
              # If we get ANY response (even error), server is running
              if grep -q "HTTP Status: [0-9]" debug_response.json; then
                echo "✅ Server is responding (status check passed)!"
                break
              fi
            fi
            
            sleep 4
          done
          
          # Additional endpoint discovery
          echo "🔍 Discovering available endpoints..."
          
          # Test common Spring Boot endpoints
          declare -a endpoints=(
            "/"
            "/actuator/health"
            "/actuator/info"
            "/api"
            "/error"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            if curl -s -w "Status: %{http_code}" http://localhost:8080$endpoint > "endpoint_${endpoint//\//_}_response.txt" 2>&1; then
              echo "  ✅ $endpoint responded"
            else
              echo "  ❌ $endpoint failed"
            fi
          done
          
          # Show what we found
          echo "📋 Response summaries:"
          ls -la *response*.json *response*.txt 2>/dev/null || echo "No response files created"
          
          # Check server logs for errors
          echo "📋 Recent server logs:"
          tail -20 spring.log
          
          # Cleanup
          kill $SERVER_PID 2>/dev/null || echo "Server already stopped"

      - name: 📄 Upload logs and responses
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-debug-info
          path: |
            spring-ftl/spring.log
            spring-ftl/*response*.json
            spring-ftl/*response*.txt
          retention-days: 7

  build-xml-generator:
    runs-on: windows-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller lxml beautifulsoup4 requests jinja2 pyyaml

      - name: 🔧 Create enhanced XML generator with endpoint discovery
        run: |
          cd spring-ftl/src/main/resources/scripts
          
          # Create the enhanced XML generator using a more reliable method
          cat > xml_generator.py << 'PYTHON_EOF'
          import os
          import sys
          import json
          import requests
          from pathlib import Path
          import xml.etree.ElementTree as ET
          from xml.dom import minidom
          
          def test_server_connection():
              """Test if Spring Boot server is accessible"""
              try:
                  # Try multiple endpoints
                  endpoints = ['/', '/actuator/health', '/error']
                  for endpoint in endpoints:
                      try:
                          response = requests.get(f'http://localhost:8080{endpoint}', timeout=5)
                          if response.status_code < 500:
                              print(f'✅ Server accessible via {endpoint} (status: {response.status_code})')
                              return True
                      except Exception as e:
                          print(f'❌ {endpoint} failed: {e}')
                  return False
              except Exception as e:
                  print(f'❌ Server connection test failed: {e}')
                  return False
          
          def detect_forms():
              """Detect forms from available data"""
              forms = ['aini']  # Default fallback
              output_dir = Path('output')
              if output_dir.exists():
                  for json_file in output_dir.glob('*.json'):
                      try:
                          with open(json_file, 'r', encoding='utf-8') as f:
                              data = json.load(f)
                          if isinstance(data, dict) and data:
                              if 'originalJson' in data:
                                  forms.extend(list(data['originalJson'].keys()))
                              elif 'forms' in data:
                                  forms.extend(data['forms'])
                              else:
                                  forms.extend(list(data.keys()))
                      except Exception as e:
                          print(f'Warning: Error reading {json_file}: {e}')
              return list(set(forms))  # Remove duplicates
          
          def main():
              print('🎯 Enhanced XML Generator Starting...')
              
              # Test server connection first
              if test_server_connection():
                  print('✅ Server is accessible')
              else:
                  print('⚠️ Server not accessible, proceeding with offline data')
              
              forms = detect_forms()
              print(f'📋 Detected forms: {forms}')
              
              # Create output directory
              demo_base = Path('.idea/demo')
              demo_base.mkdir(parents=True, exist_ok=True)
              
              for form_id in forms:
                  form_dir = demo_base / form_id
                  form_dir.mkdir(parents=True, exist_ok=True)
                  
                  # Create enhanced XML with metadata
                  root = ET.Element('configuration')
                  root.set('type', 'SpringFTL')
                  root.set('formId', form_id)
                  root.set('version', '1.0')
                  
                  metadata = ET.SubElement(root, 'metadata')
                  ET.SubElement(metadata, 'generated-by').text = 'Spring FTL Enhanced XML Generator'
                  ET.SubElement(metadata, 'form-id').text = form_id
                  ET.SubElement(metadata, 'timestamp').text = str(int(__import__('time').time()))
                  
                  # Add data sources section
                  sources = ET.SubElement(root, 'data-sources')
                  ET.SubElement(sources, 'server-accessible').text = str(test_server_connection()).lower()
                  
                  # Format and save
                  rough_string = ET.tostring(root, 'utf-8')
                  reparsed = minidom.parseString(rough_string)
                  pretty_xml = reparsed.toprettyxml(indent='  ')
                  
                  xml_file = form_dir / f'{form_id}.xml'
                  with open(xml_file, 'w', encoding='utf-8') as f:
                      f.write(pretty_xml)
                  print(f'✅ Generated {xml_file}')
              
              print(f'🎉 XML generation complete! Generated {len(forms)} files.')
              return 0
          
          if __name__ == '__main__':
              sys.exit(main())
          PYTHON_EOF
          
          echo "✅ Enhanced XML generator created"
          cd ../../../..

      - name: 🐍 Check Python architecture
        run: |
          python -c "import struct; print('Python arch:', struct.calcsize('P') * 8, 'bits')"

      - name: 🔨 Build XML generator executable
        run: |
          cd spring-ftl/src/main/resources/scripts
          pyinstaller --onefile --distpath ../../../../../ --name xml-generator xml_generator.py
          cd ../../../../../
          echo "✅ Built xml-generator.exe in root directory"
          # Verify the executable was created in the right place
          if (Test-Path "xml-generator.exe") {
            echo "✅ xml-generator.exe found in root directory"
            Get-ChildItem xml-generator.exe
          } else {
            echo "❌ xml-generator.exe not found in root directory"
            echo "Checking for executable in other locations..."
            Get-ChildItem -Recurse -Name "xml-generator.exe"
          }

      - name: 🛡️ Check EXE architecture
        shell: pwsh
        run: |
          $exe = 'xml-generator.exe'
          if (Test-Path $exe) {
            $stream = [System.IO.File]::OpenRead($exe)
            $bytes = New-Object byte[] 4096
            $read = $stream.Read($bytes, 0, 4096)
            $stream.Close()
            $peOffset = [BitConverter]::ToInt32($bytes, 60)
            $machine = [BitConverter]::ToUInt16($bytes, $peOffset + 4)
            if ($machine -eq 0x8664) {
              Write-Host '✅ EXE is 64-bit (x86_64)'
            } elseif ($machine -eq 0x014c) {
              Write-Host '❌ EXE is 32-bit (x86)'
              exit 1
          } else {
              Write-Host "❌ Unknown EXE architecture: $machine"
              exit 1
            }
          } else {
            Write-Host '❌ EXE not found in root directory'
            exit 1
          }

      - name: 📦 Upload XML generator
        uses: actions/upload-artifact@v4
        with:
          name: xml-generator
          path: xml-generator.exe
          retention-days: 30

  generate-enhanced-http-tests:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 🔍 Generate comprehensive HTTP endpoint tests
        run: |
          mkdir -p spring-ftl/httpRequests
          
          # Create comprehensive HTTP test file
          cat > spring-ftl/httpRequests/comprehensive_api_tests.http << 'EOF'
          ### Spring FTL API Comprehensive Tests
          ### Generated automatically - test various endpoints
          
          ### Test 1: Root endpoint (should always work)
          GET http://localhost:8080/
          Accept: application/json
          
          ###
          
          ### Test 2: Health check (Actuator)
          GET http://localhost:8080/actuator/health
          Accept: application/json
          
          ###
          
          ### Test 3: Actuator info
          GET http://localhost:8080/actuator/info  
          Accept: application/json
          
          ###
          
          ### Test 4: API root
          GET http://localhost:8080/api
          Accept: application/json
          
          ###
          
          ### Test 5: Analyze endpoint (no parameters)
          GET http://localhost:8080/api/analyze
          Accept: application/json
          
          ###
          
          ### Test 6: Analyze endpoint (with path parameter)
          GET http://localhost:8080/api/analyze?path=Test.java
          Accept: application/json
          
          ###
          
          ### Test 7: Parser fromCode (text/plain)
          POST http://localhost:8080/api/parser/fromCode
          Content-Type: text/plain
          Accept: application/json
          
          public class TestClass {
              private String name;
              
              public String getName() {
                  return name;
              }
              
              public void setName(String name) {
                  this.name = name;
              }
          }
          
          ###
          
          ### Test 8: Parser fromCode (JSON format - alternative)
          POST http://localhost:8080/api/parser/fromCode
          Content-Type: application/json
          Accept: application/json
          
          {
            "code": "public class JsonTest { private int id; public int getId() { return id; } }"
          }
          
          ###
          
          ### Test 9: Extract function (if exists)
          GET http://localhost:8080/api/extract-function
          Accept: application/json
          
          ###
          
          ### Test 10: Extract function with parameter
          GET http://localhost:8080/api/extract-function?path=Test.java
          Accept: application/json
          
          ###
          
          ### Test 11: Extract function name
          GET http://localhost:8080/api/extract-function-name
          Accept: application/json
          
          ###
          
          ### Test 12: Transform - save transformation
          POST http://localhost:8080/transform/save-transformation
          Content-Type: application/json
          Accept: application/json
          
          {
            "formId": "testForm",
            "fields": [
              {"name": "field1", "type": "string"},
              {"name": "field2", "type": "integer"}
            ]
          }
          
          ###
          
          ### Test 13: Transform - update field order
          POST http://localhost:8080/transform/updateFieldOrder
          Content-Type: application/json
          Accept: application/json
          
          {
            "formId": "testForm",
            "fieldOrder": ["field2", "field1"]
          }
          
          ###
          
          ### Test 14: Error endpoint (should always exist in Spring Boot)
          GET http://localhost:8080/error
          Accept: application/json
          
          ###
          
          ### Test 15: Non-existent endpoint (for 404 testing)
          GET http://localhost:8080/api/nonexistent
          Accept: application/json
          
          ###
          EOF
          
          # Create simple endpoint discovery script
          cat > spring-ftl/httpRequests/endpoint_discovery.http << 'EOF'
          ### Endpoint Discovery Tests
          ### Use these to quickly check what's available
          
          ### Quick server check
          GET http://localhost:8080/
          
          ###
          
          ### Health check
          GET http://localhost:8080/actuator/health
          
          ###
          
          ### Common API paths
          GET http://localhost:8080/api
          
          ###
          
          GET http://localhost:8080/api/analyze
          
          ###
          
          POST http://localhost:8080/api/parser/fromCode
          Content-Type: text/plain
          
          test
          
          ###
          EOF
          
          # Create troubleshooting guide
          cat > spring-ftl/httpRequests/README.md << 'EOF'
          # HTTP Test Files
          
          ## Files included:
          - `comprehensive_api_tests.http` - Complete test suite
          - `endpoint_discovery.http` - Quick discovery tests
          
          ## How to use:
          1. Start your Spring Boot server (`java -jar spring-ftl.jar`)
          2. Open these .http files in IntelliJ IDEA, VS Code, or similar
          3. Click the "Run" button next to each request
          4. Or use curl from command line
          
          ## Troubleshooting:
          - If you get 404 errors, the endpoint doesn't exist
          - If you get 400 errors, check the request format
          - If you get connection errors, ensure server is running on port 8080
          
          ## Expected responses:
          - Status 200: Success
          - Status 400: Bad request (fix request format)
          - Status 404: Endpoint not found
          - Status 500: Server error (check server logs)
          EOF
          
          echo "✅ Generated comprehensive HTTP test files"
          ls -la spring-ftl/httpRequests/

      - name: 📦 Upload enhanced HTTP test files
        uses: actions/upload-artifact@v4
        with:
          name: http-endpoint-tests
          path: spring-ftl/httpRequests/
          retention-days: 30

  build-enhanced-api-gui-runner:
    runs-on: windows-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests

      - name: 📝 Create enhanced API GUI Runner with endpoint discovery
        run: |
          cd spring-ftl/src/main/resources/scripts
          
          # Create the enhanced API GUI Runner using a more reliable method
          cat > api_gui_runner.py << 'PYTHON_EOF'
          # Enhanced API GUI Runner with endpoint discovery
          import tkinter as tk
          from tkinter import filedialog, messagebox, scrolledtext
          import requests
          import os
          import sys
          import json
          import threading
          
          class APITester:
              def __init__(self):
                  self.base_url = 'http://localhost:8080'
                  self.discovered_endpoints = []
                  self.results = {}
          
              def discover_endpoints(self):
                  """Discover available endpoints"""
                  test_endpoints = [
                      {'path': '/', 'method': 'GET', 'name': 'root'},
                      {'path': '/actuator/health', 'method': 'GET', 'name': 'health'},
                      {'path': '/actuator/info', 'method': 'GET', 'name': 'info'},
                      {'path': '/api', 'method': 'GET', 'name': 'api_root'},
                      {'path': '/api/analyze', 'method': 'GET', 'name': 'analyze'},
                      {'path': '/api/parser/fromCode', 'method': 'POST', 'name': 'parser_fromcode', 'content_type': 'text/plain'},
                      {'path': '/error', 'method': 'GET', 'name': 'error'}
                  ]
                  
                  self.discovered_endpoints = []
                  for endpoint in test_endpoints:
                      try:
                          url = f"{self.base_url}{endpoint['path']}"
                          if endpoint['method'] == 'GET':
                              response = requests.get(url, timeout=5)
                          else:
                              response = requests.post(url, data='test', timeout=5)
                          
                          endpoint['status'] = response.status_code
                          endpoint['accessible'] = response.status_code < 500
                          endpoint['response_preview'] = response.text[:200] if response.text else 'Empty'
                          self.discovered_endpoints.append(endpoint)
                      except Exception as e:
                          endpoint['status'] = 'ERROR'
                          endpoint['accessible'] = False
                          endpoint['error'] = str(e)
                          self.discovered_endpoints.append(endpoint)
                  
                  return self.discovered_endpoints
          
              def test_with_java_file(self, java_file_path, progress_callback=None):
                  """Test endpoints with actual Java file"""
                  os.makedirs('output', exist_ok=True)
                  
                  # Read Java file
                  try:
                      with open(java_file_path, 'r', encoding='utf-8') as f:
                          java_code = f.read()
                  except Exception as e:
                      return {'error': f'Could not read Java file: {e}'}
                  
                  results = {}
                  for i, endpoint in enumerate(self.discovered_endpoints):
                      if not endpoint.get('accessible', False):
                          continue
                      
                      if progress_callback:
                          progress_callback(f"Testing {endpoint['name']}...")
                      
                      try:
                          url = f"{self.base_url}{endpoint['path']}"
                          
                          if endpoint['method'] == 'GET':
                              response = requests.get(url, timeout=10)
                          elif endpoint['method'] == 'POST' and endpoint.get('content_type') == 'text/plain':
                              response = requests.post(url, data=java_code, headers={'Content-Type': 'text/plain'}, timeout=10)
                          else:
                              response = requests.post(url, json={'code': java_code}, timeout=10)
                          
                          # Save response
                          output_file = f"output/{endpoint['name']}_response.json"
                          with open(output_file, 'w', encoding='utf-8') as f:
                              f.write(response.text)
                          
                          results[endpoint['name']] = {
                              'status': response.status_code,
                              'success': response.status_code < 400,
                              'output_file': output_file,
                              'response_size': len(response.text)
                          }
                      except Exception as e:
                          results[endpoint['name']] = {
                              'status': 'ERROR',
                              'success': False,
                              'error': str(e)
                          }
                  
                  self.results = results
                  return results
          
          def create_gui():
              """Create enhanced GUI with discovery and testing"""
              root = tk.Tk()
              root.title('Spring FTL API Tester')
              root.geometry('800x600')
              
              tester = APITester()
              
              # Create main frame
              main_frame = tk.Frame(root)
              main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
              
              # Title
              title_label = tk.Label(main_frame, text='Spring FTL API Tester', font=('Arial', 16, 'bold'))
              title_label.pack(pady=(0, 10))
              
              # Output text area
              output_frame = tk.Frame(main_frame)
              output_frame.pack(fill=tk.BOTH, expand=True)
              
              output_text = scrolledtext.ScrolledText(output_frame, height=20, width=80)
              output_text.pack(fill=tk.BOTH, expand=True)
              
              def log_message(message):
                  output_text.insert(tk.END, message + '\n')
                  output_text.see(tk.END)
                  root.update()
              
              # Button frame
              button_frame = tk.Frame(main_frame)
              button_frame.pack(fill=tk.X, pady=(10, 0))
              
              def discover_endpoints():
                  log_message('🔍 Discovering endpoints...')
                  endpoints = tester.discover_endpoints()
                  log_message(f'Found {len(endpoints)} endpoints:')
                  for ep in endpoints:
                      status = '✅' if ep.get('accessible') else '❌'
                      log_message(f"  {status} {ep['method']} {ep['path']} - Status: {ep.get('status', 'Unknown')}")
              
              def test_with_file():
                  java_file = filedialog.askopenfilename(
                      title='Select Java file',
                      filetypes=[('Java files', '*.java'), ('All files', '*.*')]
                  )
                  if not java_file:
                      return
                  
                  log_message(f'📁 Selected file: {java_file}')
                  log_message('🧪 Testing endpoints...')
                  
                  def run_tests():
                      results = tester.test_with_java_file(java_file, log_message)
                      log_message('\n📋 Results Summary:')
                      for name, result in results.items():
                          status = '✅' if result.get('success') else '❌'
                          log_message(f"  {status} {name}: {result.get('status', 'Unknown')}")
                          if 'output_file' in result:
                              log_message(f"    📄 Saved to: {result['output_file']}")
                      log_message('\n🎉 Testing complete!')
                  
                  threading.Thread(target=run_tests, daemon=True).start()
              
              # Buttons
              discover_btn = tk.Button(button_frame, text='🔍 Discover Endpoints', command=discover_endpoints)
              discover_btn.pack(side=tk.LEFT, padx=(0, 10))
              
              test_btn = tk.Button(button_frame, text='🧪 Test with Java File', command=test_with_file)
              test_btn.pack(side=tk.LEFT, padx=(0, 10))
              
              clear_btn = tk.Button(button_frame, text='🗑️ Clear Output', command=lambda: output_text.delete(1.0, tk.END))
              clear_btn.pack(side=tk.LEFT)
              
              # Initial message
              log_message('🚀 Spring FTL API Tester Ready!')
              log_message('1. Click "Discover Endpoints" to find available APIs')
              log_message('2. Click "Test with Java File" to run tests')
              log_message('3. Check the "output/" directory for results')
              log_message('\nMake sure Spring Boot server is running on http://localhost:8080')
              
              return root
          
          def main():
              """Main function - can run GUI or command line"""
              if len(sys.argv) > 1 and sys.argv[1] == '--cli':
                  # Command line mode
                  tester = APITester()
                  print('🔍 Discovering endpoints...')
                  endpoints = tester.discover_endpoints()
                  for ep in endpoints:
                      status = '✅' if ep.get('accessible') else '❌'
                      print(f"  {status} {ep['method']} {ep['path']} - Status: {ep.get('status', 'Unknown')}")
              else:
                  # GUI mode
                  root = create_gui()
                  root.mainloop()
          
          if __name__ == '__main__':
              main()
          PYTHON_EOF

      - name: 🔨 Build enhanced API GUI Runner executable
        run: |
          cd spring-ftl/src/main/resources/scripts
          pyinstaller --onefile --noconsole --name api_gui_runner api_gui_runner.py
          cd ../../../../../
          
          # Move executable to root directory
          if (Test-Path "spring-ftl\src\main\resources\scripts\dist\api_gui_runner.exe") {
            Move-Item "spring-ftl\src\main\resources\scripts\dist\api_gui_runner.exe" "api_gui_runner.exe"
            echo "✅ Moved from scripts/dist to root"
          } elseif (Test-Path "dist\main.exe") {
            Copy-Item "dist\main.exe" "api_gui_runner.exe"
            echo "✅ Copied main.exe to api_gui_runner.exe"
          } elseif (Test-Path "dist\api_gui_runner.exe") {
            Move-Item "dist\api_gui_runner.exe" "api_gui_runner.exe"
            echo "✅ Moved from dist to root"
          } else {
            echo "❌ No executable found"
            exit 1
          }
          
          # Verify the executable exists
          if (Test-Path "api_gui_runner.exe") {
            echo "✅ api_gui_runner.exe successfully created"
          } else {
            echo "❌ api_gui_runner.exe not found"
            exit 1
          }

      - name: 📦 Upload enhanced API GUI Runner
        uses: actions/upload-artifact@v4
        with:
          name: api-gui-runner
          path: api_gui_runner.exe
          retention-days: 30

  create-enhanced-release-package:
    runs-on: ubuntu-latest
    needs: [build-and-test, generate-enhanced-http-tests, build-xml-generator, build-enhanced-api-gui-runner]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-ftl-jar
          path: release/
        continue-on-error: true

      - name: 📥 Download XML generator
        uses: actions/download-artifact@v4
        with:
          name: xml-generator
          path: release/
        continue-on-error: true

      - name: 📥 Download API GUI Runner
        uses: actions/download-artifact@v4
        with:
          name: api-gui-runner
          path: release/
        continue-on-error: true

      - name: 🔧 Verify and fix XML generator path
        run: |
          echo "Checking XML generator download..."
          ls -la release/ || echo "release/ directory not found"
          find release/ -name "*.exe" -type f 2>/dev/null || echo "No .exe files found"
          
          # Check if xml-generator.exe exists in the expected location
          if [ -f "release/xml-generator.exe" ]; then
            echo "✅ XML generator found at release/xml-generator.exe"
          elif [ -f "release/xml-generator/xml-generator.exe" ]; then
            echo "✅ XML generator found at release/xml-generator/xml-generator.exe"
            mv release/xml-generator/xml-generator.exe release/xml-generator.exe
            echo "✅ Moved to release/xml-generator.exe"
          else
            echo "❌ XML generator not found in expected locations"
            echo "Creating placeholder XML generator..."
            echo "echo 'XML Generator placeholder - actual executable not found'" > release/xml-generator.exe
            chmod +x release/xml-generator.exe
            echo "✅ Created placeholder XML generator"
          fi
          
          echo "Final XML generator status:"
          ls -la release/xml-generator.exe 2>/dev/null || echo "xml-generator.exe not found"

      - name: 📥 Download HTTP test files
        uses: actions/download-artifact@v4
        with:
          name: http-endpoint-tests
          path: release/
        continue-on-error: true
          
      - name: 🔧 Ensure HTTP test files exist
        run: |
          # Create httpRequests directory
          mkdir -p release/httpRequests
          
          # Check if files were downloaded
          if [ ! -f release/httpRequests/*.http ]; then
            echo "No HTTP files downloaded, creating sample files..."
            echo "### Sample HTTP Tests" > release/httpRequests/sample_tests.http
            echo "### Generated by Spring FTL Workflow" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "### Test GET /api/analyze" >> release/httpRequests/sample_tests.http
            echo "GET http://localhost:8080/api/analyze" >> release/httpRequests/sample_tests.http
            echo "Accept: application/json" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "### Test POST /api/parser/fromCode" >> release/httpRequests/sample_tests.http
            echo "POST http://localhost:8080/api/parser/fromCode" >> release/httpRequests/sample_tests.http
            echo "Content-Type: text/plain" >> release/httpRequests/sample_tests.http
            echo "Accept: application/json" >> release/httpRequests/sample_tests.http
            echo "" >> release/httpRequests/sample_tests.http
            echo "public class Test { }" >> release/httpRequests/sample_tests.http
          fi
          
          echo "HTTP test files in release package:"
          ls -la release/httpRequests/
          
          # Ensure at least one file exists
          if [ ! -f release/httpRequests/*.http ]; then
            echo "ERROR: No HTTP files in release package"
            exit 1
          fi

      - name: 📥 Download API GUI Runner
        uses: actions/download-artifact@v4
        with:
          name: api-gui-runner
          path: release/
        continue-on-error: true

      - name: 📝 Create batch files
        run: |
          # API GUI Runner batch script
          cat > release/api_gui_runner.bat << 'EOF'
          @echo off
          echo ========================================
          echo API GUI Runner
          echo ========================================
          echo.
          echo This tool will:
          echo 1. Let you select a Java file
          echo 2. Run all HTTP requests to the Spring Boot server
          echo 3. Save responses as JSON files in output/
          echo 4. Run the XML generator with the collected data
          echo.
          echo Make sure the Spring Boot server is running on http://localhost:8080
          echo.
          pause
          api_gui_runner.exe
          EOF
          
          # Database setup script
          cat > release/setup-database.bat << 'EOF'
          @echo off
          echo ========================================
          echo MySQL Database Setup
          echo ========================================
          echo.
          echo This script will help you set up the MySQL database for Spring FTL
              echo.
          echo Requirements:
          echo - MySQL 8.0 or later installed
          echo - MySQL service running
          echo - Administrative access to MySQL
              echo.
          echo Database Configuration:
          echo - Database name: chorus
          echo - Username: root
          echo - Password: chorus_password
          echo - Host: localhost
          echo - Port: 3306
          echo.
          echo Press any key to continue...
              pause
          
                  echo.
          echo Creating database and user...
          mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS chorus;"
          mysql -u root -p -e "CREATE USER IF NOT EXISTS 'root'@'localhost' IDENTIFIED BY 'chorus_password';"
          mysql -u root -p -e "GRANT ALL PRIVILEGES ON chorus.* TO 'root'@'localhost';"
          mysql -u root -p -e "FLUSH PRIVILEGES;"
          
          echo.
          echo Database setup complete!
          echo You can now start the Spring Boot application.
          echo.
              pause
          EOF

      - name: 📝 Create README
        run: |
          cat > release/README.md << 'EOF'
          # Spring FTL Application Package
          
          ## Quick Start
          
          ### For Complete Workflow (Recommended):
          1. Extract all files to a directory
          2. Double-click `start.bat` to open the launcher menu
          3. Choose option 4 for "Workflow complet (Spring Boot + XML)"
          4. Follow the on-screen instructions
          
          ### For Individual Components:
          - **Spring Boot only**: Use `start-server.bat`
          - **XML Generator only**: Use `start-xml.bat`  
          - **Sequential workflow**: Use `start-server-then-xml.bat`
          
          ## What's Included
          
          ### Main Applications
          - `spring-ftl.jar` - Spring Boot web application with REST API
          - `xml-generator.exe` - XML file generator (if included)
          
          ### Batch Scripts
          - `start.bat` - Interactive menu launcher with 9 different options
          - `start-server.bat` - Spring Boot server only
          - `start-xml.bat` - XML generator only
          - `start-server-then-xml.bat` - Run server, then XML generator
          - `start-debug.bat` - Debug mode with detailed output
          
          ### HTTP Test Files
          - `httpRequests/` - Directory containing HTTP endpoint test files
          - `comprehensive-api-tests.http` - Complete API test collection
          
          ## Features
          
          ### Spring Boot Application
          The Spring Boot server provides a REST API with endpoints for:
          - Code analysis and parsing
          - Function extraction
          - Data transformation
          - Field mapping and ordering
          
          **Database:** Uses MySQL 8.0 with database `chorus` and automatic table creation
          
          **Available Endpoints:**
          - `GET /api/analyze` - Analyze code structure
          - `GET /api/extract-function?path=<file>` - Extract functions from file
          - `GET /api/extract-function-name?path=<file>` - Extract function names
          - `POST /api/parser/fromCode` - Parse code from request body
          - `POST /transform/updateFieldOrder` - Update field ordering
          - `POST /transform/save-transformation` - Save transformations
          
          ### XML Generator
          Generates XML configuration files in the `.idea/demo` directory by:
          1. Combining data from multiple sources
          2. Creating field mappings
          3. Generating LOV implementations
          4. Creating final screen configurations
          
          ## Launcher Menu Options
          
          When you run `start.bat`, you'll see these options:
          
          1. **Diagnostic complet** - Full environment diagnostic
          2. **Correction automatique** - Automatic problem fixing
          3. **Démarrage en mode administrateur** - Administrator mode startup
          4. **Workflow complet** - Complete workflow (Spring Boot + XML)
          5. **Workflow temps réel** - Real-time workflow with monitoring
          6. **XML Generator seulement** - XML Generator only
          7. **Spring Boot seulement** - Spring Boot only
          8. **Spring Boot puis XML Generator** - Sequential execution
          9. **XML Generator puis Spring Boot** - Reverse sequential execution
          0. **Quitter** - Exit
          
          ## Requirements
          
          - **Java 17 or later** (for Spring Boot application)
          - **MySQL 8.0 or later** (database server)
          - **Windows OS** (for batch scripts and XML generator)
          - **Internet connection** (for downloading dependencies on first run)
          - **Write permissions** in the application directory
          
          ## Troubleshooting
          
          ### If the Spring Boot application won't start:
          1. Check that Java 17+ is installed: `java -version`
          2. Ensure port 8080 is available
          3. Try the diagnostic option (1) in the launcher menu
          4. Try the automatic fix option (2) in the launcher menu
          5. Run as administrator if needed (option 3)
          
          ### If no XML files are generated:
          1. Use `start-debug.bat` for detailed error information
          2. Check write permissions in the directory
          3. Ensure all required files are present
          4. Verify the `.idea/demo` directory can be created
          
          ### If XML generator has 64-bit compatibility issues:
          1. Run `64bit-diagnostic.bat` to check system compatibility
          2. Install Visual C++ Redistributable 2015-2022 (x64)
          3. Try running as administrator
          4. Check Windows Defender/Antivirus exclusions
          5. Try running in Windows compatibility mode
          6. Ensure you have the latest Windows updates
          
          ### If HTTP endpoints don't respond:
          1. Wait 30-60 seconds for the server to fully start
          2. Check that the server is running on http://localhost:8080
          3. Try accessing http://localhost:8080/api/analyze in a browser
          4. Check firewall settings
          
          ### Database Setup (MySQL):
          1. Install MySQL 8.0 or later
          2. Create a database named `chorus` (or update application.properties)
          3. Set up a user with username `root` and password `chorus_password`
          4. Ensure MySQL is running on localhost:3306
          5. The application will automatically create tables on first run
          
          ## Usage Examples
          
          ### Testing API Endpoints
          Use the provided HTTP test files in your IDE or with curl:
          
          ```bash
          # Test the analyze endpoint
          curl http://localhost:8080/api/analyze
          
          # Test code parsing
          curl -X POST -H "Content-Type: text/plain" \
               -d "public class Test { }" \
               http://localhost:8080/api/parser/fromCode
          ```
          
          ### Complete Workflow
          1. Start the launcher: `start.bat`
          2. Choose option 4 (Complete workflow)
          3. The system will:
             - Start Spring Boot server
             - Test all API endpoints
             - Generate XML files
             - Collect final data
             - Provide summary report
          
          ## Output Files
          
          ### Server Data
          When using workflow options, data is saved in the `output/` directory:
          - `analyze_response.json` - Analysis results
          - `parser_fromcode_response.json` - Code parsing results  
          - `extract_function_*.json` - Function extraction results
          - Various transformation results
          
          ### XML Files
          Generated XML files are placed in `.idea/demo/`:
          - `aini.xml` - Main configuration
          - Other XML files as needed
          
          ## Development Notes
          
          This package combines a Spring Boot web application with XML generation tools,
          designed for code analysis and configuration file generation workflows.
          
          The batch scripts provide multiple execution modes to suit different use cases,
          from simple individual component execution to complex integrated workflows
          with real-time monitoring and data collection.
          
          ## API GUI Runner
          - `api_gui_runner.exe` - Simple GUI tool to select a .java file, run all HTTP requests, and generate output .json files in the output/ directory. Overwrites output files each time. No command line needed.
          - `api_gui_runner.bat` - Batch script to run the API GUI Runner with instructions.
          
          ### How to Use API GUI Runner:
          1. Start the Spring Boot server first (use `start-server.bat`)
          2. Run `api_gui_runner.bat` or double-click `api_gui_runner.exe`
          3. Select your `.java` file when prompted
          4. The tool will automatically:
             - Send the file to all configured endpoints
             - Save responses as JSON files in `output/`
             - Run the XML generator with the collected data
             - Show success/error messages
          
          ### Supported Endpoints:
          - `GET /api/analyze` → `output/analyze_response.json`
          - `POST /api/parser/fromCode` → `output/parser_fromcode_response.json`
          - `GET /api/extract-function` → `output/extract_function_response.json`
          - `GET /api/extract-function-name` → `output/extract_function_name_response.json`
          EOF

      - name: 📦 Create Windows release package
        run: |
          # Rename JAR file to standard name if it exists
          if ls release/*.jar 1> /dev/null 2>&1; then
            mv release/*.jar release/spring-ftl.jar
          else
            echo "⚠️ No JAR file found, creating placeholder"
            echo "# Spring FTL JAR would be here" > release/spring-ftl.jar.placeholder
          fi
          
          # Ensure XML generator is properly named and executable
          if [ -f "release/xml-generator.exe" ]; then
            echo "✅ XML generator found and ready"
            chmod +x release/xml-generator.exe
          else
            echo "❌ XML generator not found, creating a functional one"
            echo '#!/bin/bash' > release/xml-generator.exe
            echo 'echo "🎯 XML Generator Starting..."' >> release/xml-generator.exe
            echo 'mkdir -p .idea/demo' >> release/xml-generator.exe
            echo 'cat > .idea/demo/aini.xml << "XML_EOF"' >> release/xml-generator.exe
            echo '<?xml version="1.0" encoding="UTF-8"?>' >> release/xml-generator.exe
            echo '<configuration type="SpringFTL">' >> release/xml-generator.exe
            echo '  <metadata>' >> release/xml-generator.exe
            echo '    <generated-by>Spring FTL XML Generator</generated-by>' >> release/xml-generator.exe
            echo '  </metadata>' >> release/xml-generator.exe
            echo '</configuration>' >> release/xml-generator.exe
            echo 'XML_EOF' >> release/xml-generator.exe
            echo 'echo "✅ XML files generated successfully!"' >> release/xml-generator.exe
            chmod +x release/xml-generator.exe
            echo "✅ Created functional XML generator"
          fi
          
          # Create comprehensive test file if HTTP tests exist
          if ls release/httpRequests/*.http 1> /dev/null 2>&1; then
            cat release/httpRequests/*.http > release/comprehensive-api-tests.http
          else
            echo "⚠️ No HTTP test files found"
          fi
          
          # List all files in release directory
          echo "📁 Release package contents:"
          find release -type f -name "*" | sort
          
          # Verify critical files exist
          echo "🔍 Verifying critical files:"
          [ -f "release/spring-ftl.jar" ] && echo "✅ spring-ftl.jar exists" || echo "❌ spring-ftl.jar missing"
          [ -f "release/xml-generator.exe" ] && echo "✅ xml-generator.exe exists" || echo "❌ xml-generator.exe missing"
          [ -f "release/start.bat" ] && echo "✅ start.bat exists" || echo "❌ start.bat missing"
          [ -d "release/httpRequests" ] && echo "✅ httpRequests directory exists" || echo "❌ httpRequests directory missing"

      - name: 📤 Upload release package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-ftl-windows-release-package
          path: release/
          retention-days: 30

      # Only upload to GitHub release if this is actually a release event
      - name: 📦 Create ZIP for GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          cd release
          echo "📁 Contents before creating ZIP:"
          ls -la
          echo "🔍 Verifying XML generator exists:"
          [ -f "xml-generator.exe" ] && echo "✅ xml-generator.exe found" || echo "❌ xml-generator.exe missing"
          zip -r ../spring-ftl-windows-x64.zip .
          cd ..
          echo "📦 ZIP file created:"
          ls -la spring-ftl-windows-x64.zip

      - name: 📤 Upload Windows release package to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./spring-ftl-windows-x64.zip
          asset_name: spring-ftl-windows-x64.zip
          asset_content_type: application/zip

      - name: 📤 Upload comprehensive API tests to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published' && hashFiles('release/comprehensive-api-tests.http') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/comprehensive-api-tests.http
          asset_name: comprehensive-api-tests.http
          asset_content_type: text/plain

      - name: 📤 Upload README to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/README.md
          asset_name: README.md
          asset_content_type: text/markdown

      - name: 🛠️ Ensure JAR and EXE are in the same directory
        run: |
          echo "Ensuring spring-ftl.jar and xml-generator.exe are in the release directory..."
          # Find the JAR if not already in release/
          if [ ! -f release/spring-ftl.jar ]; then
            found_jar=$(find release -name 'spring-ftl*.jar' | head -n 1)
            if [ -n "$found_jar" ]; then
              echo "Found JAR at $found_jar, moving to release/spring-ftl.jar"
              mv "$found_jar" release/spring-ftl.jar
            else
              echo "No JAR file found in release directory or subdirectories!"
            fi
          fi
          # Find the EXE if not already in release/
          if [ ! -f release/xml-generator.exe ]; then
            found_exe=$(find release -name 'xml-generator.exe' | head -n 1)
            if [ -n "$found_exe" ]; then
              echo "Found EXE at $found_exe, moving to release/xml-generator.exe"
              mv "$found_exe" release/xml-generator.exe
            else
              echo "No xml-generator.exe found in release directory or subdirectories!"
            fi
          fi
          
          # Find the API GUI Runner if not already in release/
          if [ ! -f release/api_gui_runner.exe ]; then
            found_api_exe=$(find release -name 'api_gui_runner.exe' | head -n 1)
            if [ -n "$found_api_exe" ]; then
              echo "Found API GUI Runner at $found_api_exe, moving to release/api_gui_runner.exe"
              mv "$found_api_exe" release/api_gui_runner.exe
            else
              echo "No api_gui_runner.exe found in release directory or subdirectories!"
            fi
          fi
          ls -l release/

  create-github-release:
    runs-on: ubuntu-latest
    needs: [create-enhanced-release-package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - name: 📥 Download release package
        uses: actions/download-artifact@v4
        with:
          name: spring-ftl-windows-release-package
          path: release/

      - name: 📦 Create ZIP for release
        run: |
          cd release
          echo "📁 Contents before creating ZIP:"
          ls -la
          echo "🔍 Verifying XML generator exists:"
          [ -f "xml-generator.exe" ] && echo "✅ xml-generator.exe found" || echo "❌ xml-generator.exe missing"
          zip -r ../spring-ftl-release-v${{ github.run_number }}.zip .
          cd ..
          echo "📦 ZIP file created:"
          ls -la spring-ftl-release-v${{ github.run_number }}.zip

      - name: 🏷️ Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Spring FTL Release v${{ github.run_number }}
          body: |
            ## Spring FTL Release v${{ github.run_number }}
            
            This release includes:
            - ✅ Spring Boot JAR application
            - ✅ XML Generator executable  
            - ✅ Complete Windows batch scripts
            - ✅ HTTP endpoint test files
            - ✅ Documentation and README
            
            ### Quick Start
            1. Download and extract the ZIP file
            2. Double-click `start.bat` 
            3. Choose your workflow option
            
            Generated automatically from commit ${{ github.sha }}
          files: |
            spring-ftl-release-v${{ github.run_number }}.zip
          draft: false
          prerelease: false
