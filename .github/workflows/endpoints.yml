name: 🔁 HTTP Endpoint Tests & Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  release:
    types: [published]

jobs:
  generate-http-tests:
    runs-on: ubuntu-latest
    outputs:
      endpoints-found: ${{ steps.generate.outputs.endpoints }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 🔍 Generate HTTP endpoint tests
        id: generate
        run: |
          cd spring-ftl
          python generate_http_tests.py
          echo "endpoints=$(ls httpRequests/*.http 2>/dev/null | wc -l || echo '0')" >> $GITHUB_OUTPUT

      - name: 📦 Upload HTTP test files
        uses: actions/upload-artifact@v4
        with:
          name: http-endpoint-tests
          path: spring-ftl/httpRequests/
          retention-days: 30

  test-api-endpoints:
    runs-on: ubuntu-latest
    needs: generate-http-tests
    if: needs.generate-http-tests.outputs.endpoints-found != '0'

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🧪 Build Spring Boot app
        run: |
          cd spring-ftl
          ./mvnw clean install -DskipTests

      - name: 🚀 Run Spring Boot app in background
        run: |
          cd spring-ftl
          nohup ./mvnw spring-boot:run > spring.log 2>&1 &
          sleep 30

      - name: ⏳ Wait for app to become ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/analyze > /dev/null 2>&1; then
              echo "✅ App is up!"
              break
            fi
            echo "⏳ Waiting for app... (attempt $i/30)"
            sleep 5
          done

      - name: 📥 Download HTTP test files
        uses: actions/download-artifact@v4
        with:
          name: http-endpoint-tests
          path: httpRequests/

      - name: 🧪 Run generated HTTP endpoint tests
        run: |
          echo "📡 Testing generated endpoints..."
          
          # Test GET endpoints
          echo "🔍 Testing GET endpoints:"
          for file in httpRequests/get_*.http; do
            if [ -f "$file" ]; then
              echo "Testing: $file"
              # Extract URL from .http file and test it
              url=$(grep -E '^GET ' "$file" | head -1 | awk '{print $2}')
              if [ ! -z "$url" ]; then
                echo "Testing URL: $url"
                curl -i "$url" || echo "❌ Failed: $url"
              fi
            fi
          done
          
          # Test POST endpoints
          echo "📤 Testing POST endpoints:"
          for file in httpRequests/post_*.http; do
            if [ -f "$file" ]; then
              echo "Testing: $file"
              # Extract URL from .http file and test it
              url=$(grep -E '^POST ' "$file" | head -1 | awk '{print $2}')
              if [ ! -z "$url" ]; then
                echo "Testing URL: $url"
                curl -i -X POST "$url" -H "Content-Type: application/json" -d '{"test": "data"}' || echo "❌ Failed: $url"
              fi
            fi
          done

      - name: 📄 Upload Spring log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-log
          path: spring-ftl/spring.log

  create-release-assets:
    runs-on: ubuntu-latest
    needs: [generate-http-tests, test-api-endpoints]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download HTTP test files
        uses: actions/download-artifact@v4
        with:
          name: http-endpoint-tests
          path: httpRequests/

      - name: 📦 Create release assets
        run: |
          # Create a comprehensive test suite
          echo "Creating comprehensive HTTP test suite..."
          
          # Combine all .http files into one comprehensive test file
          cat httpRequests/*.http > comprehensive-api-tests.http
          
          # Create a summary report
          echo "# API Endpoint Test Summary" > api-test-summary.md
          echo "Generated on: $(date)" >> api-test-summary.md
          echo "" >> api-test-summary.md
          echo "## Endpoints Found:" >> api-test-summary.md
          ls httpRequests/*.http | while read file; do
            echo "- $(basename "$file")" >> api-test-summary.md
          done
          echo "" >> api-test-summary.md
          echo "## Usage:" >> api-test-summary.md
          echo "1. Use \`comprehensive-api-tests.http\` for all tests" >> api-test-summary.md
          echo "2. Individual files available in \`httpRequests/\` directory" >> api-test-summary.md

      - name: 📤 Upload to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./comprehensive-api-tests.http
          asset_name: comprehensive-api-tests.http
          asset_content_type: text/plain

      - name: 📤 Upload summary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./api-test-summary.md
          asset_name: api-test-summary.md
          asset_content_type: text/markdown

      - name: 📤 Upload HTTP tests directory
        run: |
          tar -czf http-tests.tar.gz httpRequests/
      
      - name: 📤 Upload HTTP tests archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./http-tests.tar.gz
          asset_name: http-tests.tar.gz
          asset_content_type: application/gzip
