name: Build and Generate Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-executables:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install jinja2 pyinstaller

      - name: Build Spring Boot JAR
        working-directory: spring-ftl
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests
          
      - name: Verify JAR build
        run: |
          ls -la spring-ftl/target/
          echo "JAR file details:"
          ls -la spring-ftl/target/*.jar

      - name: Build Python executable with PyInstaller
        run: |
          # Fix paths in spec file for Linux
          sed -i "s|spring-ftl\\\\|spring-ftl/|g" main.spec
          sed -i "s|\\\\|/|g" main.spec
          
          # Build the executable
          pyinstaller main.spec --clean
          
      - name: Verify Python executable build
        run: |
          ls -la dist/
          echo "Executable details:"
          ls -la dist/main || ls -la dist/

      - name: Test Python executable
        run: |
          cd dist
          # Test if the executable runs without errors
          timeout 10s ./main || echo "Executable test completed"

      - name: Test workflow scripts
        run: |
          # Make scripts executable
          chmod +x run-xml-generator.sh
          
          # Test help functionality
          ./run-xml-generator.sh --help
          
          # Test prerequisites check (should pass)
          echo "Testing prerequisites..."
          java -version
          python3 --version || python --version

      - name: Create distribution package
        run: |
          mkdir -p release-package
          
          # Copy Spring Boot JAR
          cp spring-ftl/target/spring-ftl-*.jar release-package/spring-ftl.jar
          
          # Copy Python executable
          cp dist/main release-package/xml-generator
          
          # Copy our comprehensive workflow scripts
          cp run-xml-generator.sh release-package/
          cp run-xml-generator.bat release-package/
          chmod +x release-package/run-xml-generator.sh
          
          # Copy Python scripts
          cp -r spring-ftl/src/main/resources/scripts release-package/
          
          # Create simple startup script for backward compatibility
          cat > release-package/start.sh << 'EOFSH'
#!/bin/bash

# Use the comprehensive workflow script
./run-xml-generator.sh "$@"
EOFSH
          
          chmod +x release-package/start.sh
          
          # Create README for the package
          cat > release-package/README.md << 'EOFMD'
# XML Generator Application Package

This package contains:
- `spring-ftl.jar`: Spring Boot web application for Java class analysis
- `xml-generator`: Python executable for generating XMLs (PyInstaller build)
- `run-xml-generator.sh`: Comprehensive workflow script for Linux/macOS
- `run-xml-generator.bat`: Comprehensive workflow script for Windows
- `start.sh`: Simple startup script (backward compatibility)
- `scripts/`: Python source scripts for XML generation

## Usage

### Recommended (comprehensive workflow):

**Linux/macOS:**
```bash
./run-xml-generator.sh
```

**Windows:**
```cmd
run-xml-generator.bat
```

**With Git operations:**
```bash
./run-xml-generator.sh --git
```

### Simple usage (backward compatibility):
```bash
./start.sh
